/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: ES499CSD (https://sketchfab.com/ES499CSD)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/simple-monitor-b26a53419075442ca284cdf1d5541765
Title: Simple Monitor
*/

import { createExternalResource } from '@/utils/resourceUtils';
import { useGLTF } from '@react-three/drei';
import * as THREE from 'three';
import { GLTF } from 'three-stdlib';

type GLTFResult = GLTF & {
	nodes: {
		Monitor_1_Mat_0: THREE.Mesh;
		Monitor_1_Mat1_0: THREE.Mesh;
		Monitor_1_LED_Blue_0: THREE.Mesh;
		Boole_2_Mat_0: THREE.Mesh;
		Oil_Tank_3_Mat_0: THREE.Mesh;
		Oil_Tank_2_Mat_0: THREE.Mesh;
		Oil_Tank_1_Mat_0: THREE.Mesh;
		Oil_Tank_Mat_0: THREE.Mesh;
		Cylinder_Mat_0: THREE.Mesh;
		Cube_1_Mat_0: THREE.Mesh;
		Cube_3_Mat_0: THREE.Mesh;
		Cube_Mat_0: THREE.Mesh;
		Cube_2_Mat_0: THREE.Mesh;
		Screen_off_Mat2_0: THREE.Mesh;
	};
	materials: {
		material: THREE.MeshStandardMaterial;
		['Mat.1']: THREE.MeshStandardMaterial;
		LED_Blue: THREE.MeshStandardMaterial;
		['Mat.2']: THREE.MeshStandardMaterial;
	};
};

const localPath = 'models/simple_monitor.glb';
const uploadThingId = 'ayWUAmbcwFZQgX7ouhLYGX0tm6kl3AKdUrPjhVF7zx5sqwi8';
const externalResource = createExternalResource(localPath, uploadThingId);

export function Monitor(props: JSX.IntrinsicElements['group']) {
	const { nodes, materials } = useGLTF(externalResource) as GLTFResult;

	materials['Mat.2'].roughness = 0.8;

	return (
		<group {...props} dispose={null}>
			<group position={[-101.8616, 0, 101.85]} rotation={[-Math.PI / 2, 0, -Math.PI / 2]}>
				<group rotation={[Math.PI / 2, 0, 0]}>
					<group position={[-128.0794, 220.3459, -15]}>
						<group position={[128.0794, -220.3459, 15]}>
							<mesh
								castShadow
								receiveShadow
								geometry={nodes.Monitor_1_Mat_0.geometry}
								material={materials.material}
							/>
							<mesh
								castShadow
								receiveShadow
								geometry={nodes.Monitor_1_Mat1_0.geometry}
								material={materials['Mat.1']}
							/>
							<mesh
								castShadow
								receiveShadow
								geometry={nodes.Monitor_1_LED_Blue_0.geometry}
								material={materials.LED_Blue}
							/>
						</group>
						<group position={[38.0794, -0.3459, 15]} rotation={[0, 0, Math.PI / 2]}>
							<mesh
								castShadow
								receiveShadow
								geometry={nodes.Oil_Tank_3_Mat_0.geometry}
								material={materials.material}
								position={[-60, 0, -60]}
							/>
							<mesh
								castShadow
								receiveShadow
								geometry={nodes.Oil_Tank_2_Mat_0.geometry}
								material={materials.material}
								position={[-60, 0, 60]}
							/>
							<mesh
								castShadow
								receiveShadow
								geometry={nodes.Oil_Tank_1_Mat_0.geometry}
								material={materials.material}
								position={[60, 0, 60]}
							/>
							<mesh
								castShadow
								receiveShadow
								geometry={nodes.Oil_Tank_Mat_0.geometry}
								material={materials.material}
								position={[60, 0, -60]}
							/>
						</group>
						<mesh
							castShadow
							receiveShadow
							geometry={nodes.Boole_2_Mat_0.geometry}
							material={materials.material}
							position={[194.9081, -329.2971, 15]}
						/>
						<mesh
							castShadow
							receiveShadow
							geometry={nodes.Cylinder_Mat_0.geometry}
							material={materials.material}
							position={[41.0199, -0.3459, 15]}
							rotation={[0, 0, Math.PI / 2]}
						/>
						<mesh
							castShadow
							receiveShadow
							geometry={nodes.Cube_1_Mat_0.geometry}
							material={materials.material}
							position={[45.8639, 1.0376, 15]}
						/>
					</group>
					<group position={[-128.3282, 220.5239, 0]} scale={[1, 0.8, 1]}>
						<mesh
							castShadow
							receiveShadow
							geometry={nodes.Cube_3_Mat_0.geometry}
							material={materials.material}
							position={[28.3282, -648.4734, 0]}
						/>
						<mesh
							castShadow
							receiveShadow
							geometry={nodes.Cube_Mat_0.geometry}
							material={materials.material}
							position={[-50.5163, -290.5239, 0]}
						/>
						<mesh
							castShadow
							receiveShadow
							geometry={nodes.Cube_2_Mat_0.geometry}
							material={materials.material}
							position={[0.1598, 0.5249, 0]}
							rotation={[0, 0, 0.0727]}
						/>
					</group>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Screen_off_Mat2_0.geometry}
						material={materials['Mat.2']}
						position={[5.179, 265.1602, -1.877]}
					/>
				</group>
			</group>
		</group>
	);
}

useGLTF.preload(externalResource);
